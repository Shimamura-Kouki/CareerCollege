テーブル設計

ユーザテーブル：「１レコードが１人のユーザを意味するテーブル」
users
	user_id		varbinary(128),	-- ユーザID
	password	varbinary(128),	-- パスワード
	memo		text, -- めも
	pk(user_id)


＞＞
入金テーブル：「１レコードが１つの入金を意味するテーブル」
payments
	payment_id	unsigned int not null auto increment,
	subject_id	unsigned int,
	money		unsigned int,
	payment_date	datetime,
	pk(payment_id)

出金テーブル：「１レコードが１つの出金を意味するテーブル」
withdrawals
	withdrawal_id	unsigned int not null auto increment,
	subject_id	unsigned int,
	money		unsigned int,
	withdrawal_date	datetime,
	pk(withdrawal_id)
＜＜
または
＞＞
簿記帳テーブル：「１レコードが１つの入出金を意味するテーブル」
bookkeepings
	bookkeeping_id		unsigned int not null auto increment,
	debit_subject_id	unsigned int,
	debit_money		unsigned int,
	credit_subject_id	unsigned int,
	credit_money		unsigned int,
	bookkeeping_date	datetime,
	pk(bookkeeping_id)
＜＜

科目テーブル：「１レコードが１つの科目を意味するテーブル」
subjects
	subject_id	unsigned int not null auto increment,
	subject_name	varchar(64),
	type		tinyint,	-- 1なら入金科目、2なら出金科目
	activation_flg	tinyint,	-- 1なら有効、0なら無効
	pk(subject_id)

