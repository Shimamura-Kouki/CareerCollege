mysql -u  ec_sample_user -p --skip-binary-as-hex ec_sample
ec_sample_pass

SELECT NOW();
select now();
SELECT 1+2;

-- SELECT * FROM テーブル名;
SELECT * FROM categories;
SELECT * FROM items;
SELECT * FROM items \G
SELECT * FROM tags;
SELECT * FROM tags \G

SELECT * FROM items WHERE item_id = 1;
SELECT * FROM items WHERE item_id = 1 \G

SELECT * FROM items WHERE item_name = 'ハンバーガー';
SELECT * FROM items WHERE item_name = 'ハンバーガー' \G

SELECT * FROM items WHERE price = 111;
SELECT * FROM items WHERE price = 111 \G

SELECT * FROM items WHERE price = 99999;
SELECT * FROM items WHERE price = 99999 \G

SELECT * FROM items WHERE price > 500;
SELECT * FROM items WHERE price > 500 \G

SELECT * FROM items WHERE price >= 500;
SELECT * FROM items WHERE price >= 500 \G

-- 開区間
SELECT * FROM items WHERE price > 500 AND price < 1000;
SELECT * FROM items WHERE price > 500 AND price < 1000 \G

-- 閉区間
SELECT * FROM items WHERE price >= 500 AND price <= 1000;
SELECT * FROM items WHERE price >= 500 AND price <= 1000 \G

-- 閉区間なら
SELECT * FROM items WHERE price BETWEEN 500 AND 1000;
SELECT * FROM items WHERE price BETWEEN 500 AND 1000 \G

SELECT * FROM items WHERE release_at <= '2020-06-18 00:00:00';
SELECT * FROM items WHERE release_at <= '2020-06-18 00:00:00'\G

SELECT * FROM users \G

-- VARCHAR
-- VARBINARY

SELECT 'a' = 'a';
SELECT 'a' = 'b';
SELECT 'a' = 'A';

SELECT * FROM users WHERE user_name = '黒田' \G

SELECT * FROM users WHERE user_name LIKE '黒田%' \G
SELECT * FROM users WHERE user_name LIKE '%田%' \G

-- 
SELECT * FROM items \G
SELECT * FROM items LIMIT 5 OFFSET 0 \G

SELECT * FROM items ORDER BY price \G
SELECT * FROM items ORDER BY release_at \G

SELECT * FROM items ORDER BY price DESC \G
SELECT * FROM items ORDER BY release_at DESC \G

SELECT * FROM items ORDER BY price DESC LIMIT 2 OFFSET 0 \G
SELECT * FROM items ORDER BY release_at LIMIT 2 OFFSET 0 \G

SELECT * FROM items WHERE release_at = NULL \G -- これは「だめ」
SELECT * FROM items WHERE release_at IS NULL \G
SELECT * FROM items WHERE release_at IS NOT NULL \G

SELECT * FROM items WHERE release_at IS NOT NULL ORDER BY release_at LIMIT 2 OFFSET 0 \G

-- 
SELECT * FROM items \G
SELECT *
  FROM items
\G

SELECT * FROM items WHERE release_at IS NOT NULL ORDER BY release_at LIMIT 2 OFFSET 0 \G
SELECT 
       *
  FROM 
       items
 WHERE 
       release_at IS NOT NULL
 ORDER BY 
       release_at
 LIMIT 2
OFFSET 0
\G

-- 

-- 一行コメント
/*
 複数行コメント
 */

-- 
SELECT * FROM categories;
SELECT * FROM items WHERE category_id = 1 \G

SELECT SUM(price) FROM items WHERE category_id = 1;
SELECT SUM(price) FROM items WHERE category_id = 2;

SELECT AVG(price) FROM items WHERE category_id = 1;
SELECT AVG(price) FROM items WHERE category_id = 2;

SELECT STDDEV_POP(price) FROM items WHERE category_id = 1;
SELECT STDDEV_POP(price) FROM items WHERE category_id = 2;

-- 
SHOW TABLES;

SELECT * FROM items LIMIT 1 \G
SELECT * FROM categories WHERE category_id = 1 ;

SELECT *
  FROM items
       LEFT JOIN categories
              ON items.category_id = categories.category_id
 LIMIT 1
\G

SELECT *
  FROM items
       LEFT JOIN categories
            USING(category_id)
 LIMIT 1
\G

SELECT 
       items.*
       , categories.category_name
  FROM items
       LEFT JOIN categories
              ON items.category_id = categories.category_id
 LIMIT 1
\G

-- 
SELECT * FROM tags;
SELECT * FROM items_tags; -- 中間テーブル

SELECT * FROM items_tags WHERE tag_id = 1;

SELECT items.*
  FROM items_tags
       LEFT JOIN items ON items.item_id = items_tags.item_id
 WHERE tag_id = 1
\G

SELECT items.*
       , tags.tag_id
       , tags.tag_name
  FROM items_tags
       LEFT JOIN items ON items.item_id = items_tags.item_id
       LEFT JOIN tags ON tags.tag_id = items_tags.tag_id
 WHERE tags.tag_id = 1
\G

/*
カテゴリテーブル( categories )の全レコードを表示するSQLを書きなさい
 */
SELECT * FROM categories;

/*
ユーザテーブル( users )の全レコードを表示するSQLを書きなさい
 */
SELECT * FROM users;

/*
商品テーブル( items )の、商品ID(item_id)が3のレコードを表示するSQLを書きなさい
 */
SELECT * FROM items WHERE item_id=3;

/*
商品テーブル( items )の、カテゴリID(category_id)が3のレコードを表示するSQLを書きなさい
 */
SELECT * FROM items WHERE category_id=3;

/*
商品テーブル( items )の、値段(price)が、「200円以上、500円以下」のレコードを表示するSQLを書きなさい
 */
SELECT * FROM items WHERE price >= 200 AND price <= 500;
SELECT * FROM items WHERE price BETWEEN 200 AND 500;

/*
商品テーブル( items )の、値段(price)が、「200円以上、500円以下」のレコードを、"値段昇順に"表示するSQLを書きなさい
 */
SELECT * FROM items WHERE price BETWEEN 200 AND 500 ORDER BY price ;

/*
商品テーブル( items )の、値段(price)が高い順番に４レコード表示するSQLを書きなさい
 */
SELECT * FROM items ORDER BY price DESC LIMIT 4 OFFSET 0;
SELECT * FROM items ORDER BY price DESC LIMIT 4;
SELECT * FROM items ORDER BY price DESC LIMIT 0,4; -- MySQL固有

-- 
SELECT * FROM sales_slips;
SELECT * FROM sales_slip_details;

SELECT * FROM sales_slips WHERE sales_slip_id = 1 \G
SELECT * FROM sales_slip_details WHERE sales_slip_id = 1 \G

-- 
SELECT count(*)
  FROM items
;
SELECT count(item_id)
  FROM items
;
-- これは数値が変わるよ(NULLなレコードがあるから)
SELECT count(release_at)
  FROM items
;

SELECT category_id
       ,count(*)
  FROM items
 GROUP BY category_id
;

SELECT item_id
       ,count(*)
  FROM sales_slip_details
 GROUP BY item_id
;

SELECT category_id
       ,AVG(price)
       ,count(*)
  FROM items
 GROUP BY category_id
 ORDER BY category_id
;

SELECT category_id
       ,AVG(price) as avg
       ,count(*) as cnt
  FROM items
 GROUP BY category_id
 ORDER BY category_id
;

SELECT sales_slip_id
       , count(*)
  FROM sales_slip_details
 GROUP BY sales_slip_id
 ORDER BY sales_slip_id
;

SELECT category_id
       ,count(*) as cnt
  FROM items
 GROUP BY category_id
 ORDER BY cnt
;

/*
-- これはerrorになる
SELECT category_id
       ,count(*) as cnt
  FROM items
 WHERE cnt >= 10 -- ここがダメ
 GROUP BY category_id
;
**

SELECT category_id
       ,count(*)
  FROM items
 GROUP BY category_id
HAVING count(*) >= 10
;

-- 
SELECT * FROM items WHERE category_id = 1 \G
SELECT * FROM items WHERE category_id = 1 OR category_id = 2 \G
SELECT * FROM items WHERE category_id IN(1, 2) \G

SELECT *
  FROM items
 WHERE category_id IN(
                        SELECT category_id
                          FROM categories
                         WHERE category_name = '飲料'
                     )
\G

SELECT items.*
  FROM items
       LEFT JOIN categories ON categories.category_id = items.category_id
 WHERE categories.category_name = '飲料'
\G

-- 
/*
item_name   varchar(128) 
category_id bigint unsigned
price       int unsigned
release_at  datetime
sale_end_at datetime
*/
-- INSERT INTO テーブル名(カラム名, カラム名, ...) VALUES(データ, データ, ...);

INSERT INTO items(item_name, category_id, price, release_at, sale_end_at)
           VALUES('桜のはちみつ', 2        , 1280 , '2020-01-01 00:00:00', NULL);

UPDATE テーブル名 SET 変えたいカラム名=置き換えたいデータ
                    , 変えたいカラム名=置き換えたいデータ
                    , 変えたいカラム名=置き換えたいデータ 
 WHERE カラムの特定
;

-- 
SELECT *
  FROM items
 WHERE item_id = 47
\G

UPDATE items
   SET price=1580
 WHERE item_id = 47
;

SELECT *
  FROM items
 WHERE item_id = 47
\G

Create  INSERT
Read    SELECT
Update  UPDATE
Delete  DELETE

-- 行ロック
BEGIN;
SELECT *  FROM items WHERE item_id = 47 FOR UPDATE \G
ROLLBACK; / COMMIT;
